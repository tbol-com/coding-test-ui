Tasks:
1. Convert React class component (App.tsx) to React Functional component.

Solution:

import React, { useState } from 'react';
import "./App.css";
import Button from "./components/Button";

const App = () => {

  const [count, setCount] = useState(0);

  const increment = () => (setCount(count + 1));

  const decrement = () => (setCount(count - 1));

  return (
    <div className="app">
      <div>
        <div className="count">
          <h3>Count:</h3>
          <h1>{count}</h1>
        </div>
        <div className="buttons">
          <Button title={"-"} action={decrement} />
          <Button title={"+"} action={increment} />
        </div>
      </div>
    </div>
  );
};

export default App;

2. Ask to enhance the code so that the counter value cannot be negative.
3. Ask to enhance the code so that the "-" button is disabled when counter value is zero.
4. Ask to enhance the code to give an user friendly message when someone tries to reduce the counter value below zero instead of disabling the "-" button.
   Hint: Suggest using Alert component from any React UI library of their choice or if they want even writing a custom component is fine.
5. What's the recommended approach if we want to use the "count" value in some other component.
      Scenario A : When the other component is the child component of the App component - 
        Solution : Pass the count value as prop.
      Scenario B : When the other component is not a child component or not in the same hierarchy as the App component.
        Solution : Use global state management. Libraries like Redux, MobX etc.
6. What would you do if we want to introduce asynchronous behaviour in this application.
    Solution : Use library like redux saga or rxjs to introduce asynchronous behaviour       